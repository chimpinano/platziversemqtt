{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","id","uuid","AgentStub","db","sandbox","single","Object","assign","uuidArgs","where","beforeEach","create","hasMany","findOne","stub","withArgs","returns","Promise","resolve","byUuid","findById","byId","update","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","createOrUpdate","calledTwice"],"mappings":"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","file":"agent-tests.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\n\r\nconst agentFixtures = require('./fixtures/agent')\r\n\r\nlet config = {\r\n  logging () {}\r\n}\r\n\r\nlet MetricStub = {\r\n  belongsTo: sinon.spy()\r\n}\r\n\r\nlet id = 1\r\nlet uuid = 'yyy-yyy-yyy'\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\nlet single = Object.assign({}, agentFixtures.single)\r\n\r\nlet uuidArgs = {\r\n    where: { uuid }\r\n}\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.sandbox.create()\r\n\r\n  AgentStub = {\r\n    hasMany: sandbox.spy()\r\n  }\r\n\r\n  // Model findOne Stub\r\n  AgentStub.findOne = sandbox.stub()\r\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\r\n  \r\n  // Model findById Stub\r\n  AgentStub.findById = sandbox.stub()\r\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\r\n\r\n  // Model update Stub\r\n  AgentStub.update = sandbox.stub()\r\n  AgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single))\r\n  \r\n  const setupDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub,\r\n    './models/metric': () => MetricStub\r\n  })\r\n\r\n  db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n  sandbox && sinon.sandbox.restore()\r\n})\r\n\r\ntest('Agent', t => {\r\n  t.truthy(db.Agent, 'Agent service should exist')\r\n})\r\n\r\ntest.serial('Setup', t => {\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\r\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')\r\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\r\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\r\n})\r\n\r\ntest.serial('Agent#findById', async t => {\r\n  let agent = await db.Agent.findById(id)\r\n\r\n  t.true(AgentStub.findById.called, 'findById should be called on model')\r\n  t.true(AgentStub.findById.calledOnce, 'findById should be called once')\r\n  t.true(AgentStub.findById.calledWith(id), 'findById should be called with specified id')\r\n\r\n  t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\r\n})\r\n\r\ntest.serial('Agent#createOrUpdate - exists', async t => {\r\n    let agent = await db.Agent.createOrUpdate(single)\r\n  \r\n    t.true(AgentStub.findOne.called, 'findOne should be called on model')\r\n    t.true(AgentStub.findOne.calledTwice, 'findOne should be called twice')\r\n    t.true(AgentStub.findOne.calledWith(uuidArgs), 'findOne should be called with uuid args')\r\n    t.true(AgentStub.update.called, 'agent.update called on model')\r\n    t.true(AgentStub.update.calledOnce, 'agent.update should be called once')\r\n    t.true(AgentStub.update.calledWith(single), 'agent.update should be called with specified args')\r\n  \r\n    t.deepEqual(agent, single, 'agent should be the same')\r\n  })\r\n"]}