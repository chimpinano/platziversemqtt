{"version":3,"sources":["metric-tests.js"],"names":["test","require","sinon","proxyquire","metricFixtures","agentFixtures","config","logging","uuid","type","MetricStub","AgentStub","db","sandbox","uuidArgs","where","metricUuidArgs","attributes","group","include","model","raw","typeUuidArgs","limit","order","newMetric","agentId","value","beforeEach","create","belongsTo","spy","hasMany","findOne","stub","withArgs","returns","Promise","resolve","byUuid","toJSON","findAll","all","findByAgentUuid","findByTypeAgentUuid","setupDatabase","afterEach","restore","t","truthy","Metric","serial","true","called","calledWith","metric","calledOnce","deepEqual"],"mappings":"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","file":"metric-tests.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\n\r\nconst metricFixtures = require('./fixtures/metric')\r\nconst agentFixtures = require('./fixtures/agent')\r\n\r\nlet config = {\r\n  logging () {}\r\n}\r\n\r\nlet uuid = 'yyy-yyy-yyy'\r\nlet type = 'CPU'\r\nlet MetricStub = null\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\nlet uuidArgs = {\r\n  where: { uuid }\r\n}\r\n\r\nlet metricUuidArgs = {\r\n  attributes: [ 'type' ],\r\n  group: [ 'type' ],\r\n  include: [{\r\n    attributes: [],\r\n    model: AgentStub,\r\n    where: {\r\n      uuid\r\n    }\r\n  }],\r\n  raw: true\r\n}\r\n\r\nlet typeUuidArgs = {\r\n  attributes: [ 'id', 'type', 'value', 'createdAt' ],\r\n  where: {\r\n    type\r\n  },\r\n  limit: 20,\r\n  order: [[ 'createdAt', 'DESC' ]],\r\n  include: [{\r\n    attributes: [],\r\n    model: AgentStub,\r\n    where: {\r\n      uuid\r\n    }\r\n  }],\r\n  raw: true\r\n}\r\n\r\nlet newMetric = {\r\n  agentId: 1,\r\n  type: 'CPU',\r\n  value: '18%'\r\n}\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.sandbox.create()\r\n\r\n  MetricStub = {\r\n    belongsTo: sinon.spy()\r\n  }\r\n\r\n  AgentStub = {\r\n    hasMany: sinon.spy()\r\n  }\r\n\r\n  // Model create Stub\r\n  AgentStub.findOne = sandbox.stub()\r\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\r\n\r\n  MetricStub.create = sandbox.stub()\r\n  MetricStub.create.withArgs(newMetric).returns(Promise.resolve({\r\n    toJSON () { return newMetric }\r\n  }))\r\n\r\n  metricUuidArgs.include[0].model = AgentStub\r\n  typeUuidArgs.include[0].model = AgentStub\r\n\r\n  // Model findAll Stub\r\n  MetricStub.findAll = sandbox.stub()\r\n  MetricStub.findAll.withArgs().returns(Promise.resolve(metricFixtures.all))\r\n  MetricStub.findAll.withArgs(metricUuidArgs).returns(Promise.resolve(metricFixtures.findByAgentUuid(uuid)))\r\n  MetricStub.findAll.withArgs(typeUuidArgs).returns(Promise.resolve(metricFixtures.findByTypeAgentUuid(type, uuid)))\r\n\r\n  const setupDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub,\r\n    './models/metric': () => MetricStub\r\n  })\r\n\r\n  db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n  sandbox && sinon.sandbox.restore()\r\n})\r\n\r\ntest('Metric', t => {\r\n  t.truthy(db.Metric, 'Metric service should exist')\r\n})\r\n\r\ntest.serial('Setup Metric', t => {\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\r\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')\r\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\r\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\r\n})\r\n\r\ntest.serial('Metric#findByAgentUuid', async t => {\r\n  let metric = await db.Metric.findByAgentUuid(uuid)\r\n\r\n  t.true(MetricStub.findAll.called, 'findAll should be called on model')\r\n  t.true(MetricStub.findAll.calledOnce, 'findAll should be called once')\r\n  t.true(MetricStub.findAll.calledWith(metricUuidArgs), 'findAll should be called with specified metricUuidArgs')\r\n\r\n  t.deepEqual(metric, metricFixtures.findByAgentUuid(uuid), 'should be the same')\r\n})\r\n\r\ntest.serial('Metric#findByTypeAgentUuid', async t => {\r\n  let metric = await db.Metric.findByTypeAgentUuid(type, uuid)\r\n\r\n  t.true(MetricStub.findAll.called, 'findAll should be called on model')\r\n  t.true(MetricStub.findAll.calledOnce, 'findAll should be called once')\r\n  t.true(MetricStub.findAll.calledWith(typeUuidArgs), 'findAll should be called with specified typeUuidArgs')\r\n\r\n  t.deepEqual(metric, metricFixtures.findByTypeAgentUuid(type, uuid), 'should be the same')\r\n})\r\n\r\ntest.serial('Metric#create', async t => {\r\n  let metric = await db.Metric.create(uuid, newMetric)\r\n\r\n  t.true(AgentStub.findOne.called, 'Agent findOne should be called on model')\r\n  t.true(AgentStub.findOne.calledOnce, 'Agent findOne should be called once')\r\n  t.true(AgentStub.findOne.calledWith(uuidArgs), 'findOne should be called with uuid args')\r\n  \r\n  t.true(MetricStub.create.called, 'create should be called on model')\r\n  t.true(MetricStub.create.calledOnce, 'create should be called once')\r\n  t.true(MetricStub.create.calledWith(newMetric), 'create should be called with specified args')\r\n\r\n  t.deepEqual(metric, newMetric, 'agent should be the same')\r\n})"]}