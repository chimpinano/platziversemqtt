'use strict';var cov_a6n8n6yjq=function(){var path='D:\\devNodejs\\platzi\\platziverse\\platziverse-db\\tests\\fixtures\\metric.js',hash='9695d50ba68b4f6ee4e4b562dcaedf73e2245825',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'D:\\devNodejs\\platzi\\platziverse\\platziverse-db\\tests\\fixtures\\metric.js',statementMap:{'0':{start:{line:2,column:22},end:{line:2,column:40}},'1':{start:{line:4,column:15},end:{line:8,column:1}},'2':{start:{line:10,column:16},end:{line:24,column:1}},'3':{start:{line:27,column:16},end:{line:27,column:38}},'4':{start:{line:28,column:2},end:{line:28,column:37}},'5':{start:{line:31,column:0},end:{line:47,column:1}}},fnMap:{'0':{name:'extend',decl:{start:{line:26,column:9},end:{line:26,column:15}},loc:{start:{line:26,column:30},end:{line:29,column:1}},line:26}},branchMap:{},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0},f:{'0':0},b:{},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const agentFixtures=(cov_a6n8n6yjq.s[0]++,require('./agent'));const metric=(cov_a6n8n6yjq.s[1]++,{type:'CPU',value:'23%',agentId:agentFixtures.single.uuid});const metrics=(cov_a6n8n6yjq.s[2]++,[metric,extend(metric,{id:2,value:'25%',type:'RAM'}),extend(metric,{id:3,agentId:agentFixtures.single2.uuid}),extend(metric,{id:4})]);function extend(obj,values){cov_a6n8n6yjq.f[0]++;const clone=(cov_a6n8n6yjq.s[3]++,Object.assign({},obj));cov_a6n8n6yjq.s[4]++;return Object.assign(clone,values);}cov_a6n8n6yjq.s[5]++;module.exports={single:metric,all:metrics/*byAgentUuid: uuid => metrics.filter(a => a.agent['uuid'] === uuid).map(b => b.type).filter((v, i, a) => a.indexOf(v) === i),
  byTypeAgentUuid: (type, uuid) => metrics.filter(a => a.type === type && a.agent['uuid'] === uuid)
                      .map(b => {
                        const m = {
                          id: b.id,
                          type: b.type,
                          value: b.value,
                          createdAt: b.createdAt
                        }
                        return m
                      }).sort((a,b) => {
                        return new Date(b.date) - new Date(a.date);
                      })*/};