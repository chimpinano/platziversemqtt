{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","id","uuid","AgentStub","db","sandbox","single","Object","assign","connectedArgs","where","connected","usernameArgs","username","uuidArgs","newAgent","name","hostname","pid","beforeEach","create","hasMany","stub","withArgs","returns","Promise","resolve","toJSON","update","findById","byId","findOne","byUuid","findAll","all","platzi","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","findByUuid","agents","is","length","findConnected","findByUsername","createOrUpdate","calledTwice"],"mappings":"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","file":"agent-tests.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\n\r\nconst agentFixtures = require('./fixtures/agent')\r\n\r\nlet config = {\r\n  logging () {}\r\n}\r\n\r\nlet MetricStub = {\r\n  belongsTo: sinon.spy()\r\n}\r\n\r\nlet id = 1\r\nlet uuid = 'yyy-yyy-yyy'\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\nlet single = Object.assign({}, agentFixtures.single)\r\n\r\nlet connectedArgs = {\r\n    where: { connected: true }\r\n}\r\n  \r\nlet usernameArgs = {\r\n    where: { username: 'platzi', connected: true }\r\n}\r\n  \r\nlet uuidArgs = {\r\n    where: { uuid }\r\n}\r\n  \r\nlet newAgent = {\r\n    uuid: '123-123-123',\r\n    name: 'test',\r\n    username: 'test',\r\n    hostname: 'test',\r\n    pid: 0,\r\n    connected: false\r\n}\r\n\r\ntest.beforeEach(async () => {\r\n  sandbox = sinon.sandbox.create()\r\n\r\n  AgentStub = {\r\n    hasMany: sandbox.spy()\r\n  }\r\n\r\n// Model create Stub\r\nAgentStub.create = sandbox.stub()\r\nAgentStub.create.withArgs(newAgent).returns(Promise.resolve({\r\n  toJSON () { return newAgent }\r\n}))\r\n\r\n// Model update Stub\r\nAgentStub.update = sandbox.stub()\r\nAgentStub.update.withArgs(single, uuidArgs).returns(Promise.resolve(single))\r\n\r\n// Model findById Stub\r\nAgentStub.findById = sandbox.stub()\r\nAgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\r\n\r\n// Model findOne Stub\r\nAgentStub.findOne = sandbox.stub()\r\nAgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\r\n\r\n// Model findAll Stub\r\nAgentStub.findAll = sandbox.stub()\r\nAgentStub.findAll.withArgs().returns(Promise.resolve(agentFixtures.all))\r\nAgentStub.findAll.withArgs(connectedArgs).returns(Promise.resolve(agentFixtures.connected))\r\nAgentStub.findAll.withArgs(usernameArgs).returns(Promise.resolve(agentFixtures.platzi))\r\n\r\n  const setupDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub,\r\n    './models/metric': () => MetricStub\r\n  })\r\n\r\n  db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n  sandbox && sinon.sandbox.restore()\r\n})\r\n\r\ntest('Agent', t => {\r\n  t.truthy(db.Agent, 'Agent service should exist')\r\n})\r\n\r\ntest.serial('Setup', t => {\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\r\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')\r\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\r\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\r\n})\r\n\r\ntest.serial('Agent#findById', async t => {\r\n  let agent = await db.Agent.findById(id)\r\n\r\n  t.true(AgentStub.findById.called, 'findById should be called on model')\r\n  t.true(AgentStub.findById.calledOnce, 'findById should be called once')\r\n  t.true(AgentStub.findById.calledWith(id), 'findById should be called with specified id')\r\n\r\n  t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\r\n})\r\n\r\ntest.serial('Agent#findByUuid', async t => {\r\n    let agent = await db.Agent.findByUuid(uuid)\r\n  \r\n    t.true(AgentStub.findOne.called, 'findOne should be called on model')\r\n    t.true(AgentStub.findOne.calledOnce, 'findOne should be called once')\r\n    t.true(AgentStub.findOne.calledWith(uuidArgs), 'findOne should be called with uuid args')\r\n  \r\n    t.deepEqual(agent, agentFixtures.byUuid(uuid), 'agent should be the same')\r\n  })\r\n  \r\n  test.serial('Agent#findAll', async t => {\r\n    let agents = await db.Agent.findAll()\r\n  \r\n    t.true(AgentStub.findAll.called, 'findAll should be called on model')\r\n    t.true(AgentStub.findAll.calledOnce, 'findAll should be called once')\r\n    t.true(AgentStub.findAll.calledWith(), 'findAll should be called without args')\r\n  \r\n    t.is(agents.length, agentFixtures.all.length, 'agents should be the same amount')\r\n    t.deepEqual(agents, agentFixtures.all, 'agents should be the same')\r\n  })\r\n  \r\n  test.serial('Agent#findConnected', async t => {\r\n    let agents = await db.Agent.findConnected()\r\n  \r\n    t.true(AgentStub.findAll.called, 'findAll should be called on model')\r\n    t.true(AgentStub.findAll.calledOnce, 'findAll should be called once')\r\n    t.true(AgentStub.findAll.calledWith(connectedArgs), 'findAll should be called with connected args')\r\n  \r\n    t.is(agents.length, agentFixtures.connected.length, 'agents should be the same amount')\r\n    t.deepEqual(agents, agentFixtures.connected, 'agents should be the same')\r\n  })\r\n  \r\n  test.serial('Agent#findByUsername', async t => {\r\n    let agents = await db.Agent.findByUsername('platzi')\r\n  \r\n    t.true(AgentStub.findAll.called, 'findAll should be called on model')\r\n    t.true(AgentStub.findAll.calledOnce, 'findAll should be called once')\r\n    t.true(AgentStub.findAll.calledWith(usernameArgs), 'findAll should be called with username args')\r\n  \r\n    t.is(agents.length, agentFixtures.platzi.length, 'agents should be the same amount')\r\n    t.deepEqual(agents, agentFixtures.platzi, 'agents should be the same')\r\n})\r\n\r\ntest.serial('Agent#createOrUpdate - exists', async t => {\r\n    let agent = await db.Agent.createOrUpdate(single)\r\n  \r\n    t.true(AgentStub.findOne.called, 'findOne should be called on model')\r\n    t.true(AgentStub.findOne.calledTwice, 'findOne should be called twice')\r\n    t.true(AgentStub.findOne.calledWith(uuidArgs), 'findOne should be called with uuid args')\r\n    t.true(AgentStub.update.called, 'agent.update called on model')\r\n    t.true(AgentStub.update.calledOnce, 'agent.update should be called once')\r\n    t.true(AgentStub.update.calledWith(single), 'agent.update should be called with specified args')\r\n  \r\n    t.deepEqual(agent, single, 'agent should be the same')\r\n  })\r\n\r\n  test.serial('Agent#createOrUpdate - new', async t => {\r\n    let agent = await db.Agent.createOrUpdate(newAgent)\r\n  \r\n    t.true(AgentStub.findOne.called, 'findOne should be called on model')\r\n    t.true(AgentStub.findOne.calledOnce, 'findOne should be called once')\r\n    t.true(AgentStub.findOne.calledWith({\r\n      where: { uuid: newAgent.uuid }\r\n    }), 'findOne should be called with uuid args')\r\n    t.true(AgentStub.create.called, 'create should be called on model')\r\n    t.true(AgentStub.create.calledOnce, 'create should be called once')\r\n    t.true(AgentStub.create.calledWith(newAgent), 'create should be called with specified args')\r\n  \r\n    t.deepEqual(agent, newAgent, 'agent should be the same')\r\n  })\r\n"]}