{"version":3,"sources":["metric-tests.js"],"names":["test","require","sinon","proxyquire","metricFixtures","agentFixtures","config","logging","AgentStub","hasMany","spy","db","MetricStub","uuid","type","agentId","metricTypes","byAgentUuid","metricTypesUuid","byTypeAgentUuid","sandbox","uuidArgs","attributes","group","include","model","where","raw","typeUuidArgs","limit","order","oneAgentArgs","newMetric","value","createdAt","Date","updatedAt","newMetricWithAgentId","agentArgs","beforeEach","belongsTo","create","findOne","stub","withArgs","returns","Promise","resolve","byUuid","findAll","all","findByAgentUuid","findByTypeAgentUuid","toJSON","Object","assign","setupDatabase","afterEach","restore","t","truthy","Metric","serial","metric","true","called","calledOnce","calledWith","deepEqual"],"mappings":"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","file":"metric-tests.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\n\r\nconst metricFixtures = require('./fixtures/metric')\r\nconst agentFixtures = require('./fixtures/agent')\r\n\r\nlet config = {\r\n  logging: function () { }\r\n}\r\n\r\nlet AgentStub = {\r\n  hasMany: sinon.spy()\r\n}\r\n\r\nlet db = null\r\nlet MetricStub = null\r\nlet uuid = 'yyy-yyy-yyy'\r\nlet type = 'humidity'\r\nlet agentId = 1\r\nlet metricTypes = metricFixtures.byAgentUuid(uuid)\r\nlet metricTypesUuid = metricFixtures.byTypeAgentUuid(type, uuid)\r\n\r\nlet sandbox = null\r\n\r\nlet uuidArgs = {\r\n  attributes: ['type'],\r\n  group: ['type'],\r\n  include: [{\r\n    attributes: [],\r\n    model: AgentStub,\r\n    where: {\r\n      uuid\r\n    }\r\n  }],\r\n  raw: true\r\n}\r\n\r\nlet typeUuidArgs = {\r\n  attributes: ['id', 'type', 'value', 'createdAt'],\r\n  where: {\r\n    type\r\n  },\r\n  limit: 20,\r\n  order: [['createdAt', 'DESC']],\r\n  include: [{\r\n    attributes: [],\r\n    where: {\r\n      uuid\r\n    }\r\n  }],\r\n  raw: true\r\n}\r\n\r\nlet oneAgentArgs = {\r\n  where: {\r\n    uuid\r\n  }\r\n}\r\n\r\nlet newMetric = {\r\n  type: 'light',\r\n  value: '20 lumens',\r\n  createdAt: new Date(),\r\n  updatedAt: new Date()\r\n}\r\n\r\nlet newMetricWithAgentId = {\r\n  agentId: agentId,\r\n  type: 'light',\r\n  value: '20 lumens',\r\n  createdAt: new Date(),\r\n  updatedAt: new Date()\r\n}\r\n\r\nlet agentArgs = {\r\n  where: {\r\n    uuid\r\n  }\r\n}\r\n\r\ntest.beforeEach(async () => {\r\n  MetricStub = {\r\n    belongsTo: sinon.spy()\r\n  }\r\n\r\n  sandbox = sinon.sandbox.create()\r\n\r\n  // Agent findOne Stub\r\n  AgentStub.findOne = sandbox.stub()\r\n  AgentStub.findOne.withArgs(agentArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\r\n\r\n  // Model findAll Stub\r\n  MetricStub.findAll = sandbox.stub()\r\n  MetricStub.findAll.withArgs().returns(Promise.resolve(metricFixtures.all))\r\n  MetricStub.findAll.withArgs(uuidArgs).returns(Promise.resolve(metricFixtures.byAgentUuid(uuid)))\r\n  MetricStub.findAll.withArgs(typeUuidArgs).returns(Promise.resolve(metricFixtures.byTypeAgentUuid(type, uuid)))\r\n\r\n  // Model findByAgentUuid Stub\r\n  MetricStub.findByAgentUuid = sandbox.stub()\r\n  MetricStub.findByAgentUuid.withArgs(uuid).returns(Promise.resolve(metricFixtures.byAgentUuid(uuid)))\r\n\r\n  // Model findByTypeAgentUuid Stub\r\n  MetricStub.findByTypeAgentUuid = sandbox.stub()\r\n  MetricStub.findByTypeAgentUuid.withArgs(type, uuid).returns(Promise.resolve(metricFixtures.byTypeAgentUuid(type, uuid)))\r\n\r\n  // Model create Stub\r\n  MetricStub.create = sandbox.stub()\r\n  MetricStub.create.withArgs(newMetric).returns(Promise.resolve({\r\n    toJSON () { return Object.assign(newMetric, {agentId: agentId}) }\r\n  }))\r\n\r\n  const setupDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub,\r\n    './models/metric': () => MetricStub\r\n  })\r\n  db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n  sandbox && sinon.sandbox.restore()\r\n})\r\n\r\ntest('Metric', t => {\r\n  t.truthy(db.Metric, 'Metric service should exist')\r\n})\r\n\r\ntest.serial('Metric#findByUuid', async t => {\r\n  let metric = await db.Metric.findByAgentUuid(uuid)\r\n\r\n  t.true(MetricStub.findAll.called, 'findAll should be called on Model')\r\n  t.true(MetricStub.findAll.calledOnce, 'findAll should be called once')\r\n  t.true(MetricStub.findAll.calledWith(uuidArgs), 'findAll should be called with specified args')\r\n\r\n  t.deepEqual(metric, metricTypes, 'Should be the same')\r\n})\r\n\r\ntest.serial('Metric#findByTypeAgentUuid', async t => {\r\n  let metric = await db.Metric.findByTypeAgentUuid(type, uuid)\r\n  t.true(MetricStub.findAll.called, 'findAll should be called on Model')\r\n  t.true(MetricStub.findAll.calledOnce, 'findAll should be called once')\r\n  t.true(MetricStub.findAll.calledWith(typeUuidArgs), 'findAll should be called with specified args')\r\n\r\n  t.deepEqual(metric, metricTypesUuid, 'Should be the same')\r\n})\r\n\r\ntest.serial('Metric#create', async t => {\r\n  let metric = await db.Metric.create(uuid, newMetric)\r\n\r\n  t.true(AgentStub.findOne.called, 'findOne should be called on Model')\r\n  t.true(AgentStub.findOne.calledOnce, 'findOne should be called once')\r\n  t.true(AgentStub.findOne.calledWith(oneAgentArgs), 'findOne should be called with specified agentId')\r\n\r\n  t.true(MetricStub.create.called, 'create should be called on model')\r\n  t.true(MetricStub.create.calledOnce, 'create should be called once')\r\n  t.true(MetricStub.create.calledWith(newMetric), 'create should be called with specified args')\r\n\r\n  t.deepEqual(metric, newMetricWithAgentId, 'Should be the same Metric')\r\n})"]}