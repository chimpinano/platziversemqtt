{"version":3,"sources":["metric-tests.js"],"names":["test","require","sinon","proxyquire","metricFixtures","agentFixture","AgentStub","hasMany","spy","config","logging","newMetric","type","value","MetricStub","db","sandbox","uuid","uuidArgs","where","typeUuidArgs","attributes","limit","order","include","model","raw","metricArgs","group","beforeEach","t","create","belongsTo","stub","withArgs","returns","Promise","resolve","toJSON","findAll","byAgentUuid","byTypeAgentUuid","findOne","byUuid","setupDatabase","afterEach","restore","serial","true","called","calledWith","truthy","Metric","metric","calledOnce","deepEqual","single","findByAgentUuid","findByTypeAgentUuid"],"mappings":"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","file":"metric-tests.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\nconst metricFixtures = require('./fixtures/metric')\r\nconst agentFixture = require('./fixtures/agent')\r\n\r\nlet AgentStub = {\r\n  hasMany: sinon.spy()\r\n}\r\n\r\nlet config = {\r\n  logging: function () {}\r\n}\r\n\r\nlet newMetric = {\r\n  type: 'CPU',\r\n  value: '23%'\r\n}\r\nlet MetricStub = null\r\nlet db = null\r\nlet sandbox = null\r\nlet type = 'CPU'\r\nlet uuid = 'xxx-xxx-xxx'\r\nlet uuidArgs = {\r\n  where: {\r\n    uuid\r\n  }\r\n}\r\nlet typeUuidArgs = {\r\n  attributes: [ 'id', 'type', 'value', 'createdAt' ],\r\n  where: {\r\n    type\r\n  },\r\n  limit: 20,\r\n  order: [[ 'createdAt', 'DESC' ]],\r\n  include: [{\r\n    attributes: [],\r\n    model: AgentStub,\r\n    where: {\r\n      uuid\r\n    }\r\n  }],\r\n  raw: true\r\n}\r\n\r\nlet metricArgs = {\r\n  attributes: ['type'],\r\n  group: [ 'type' ],\r\n  include: [{\r\n    attributes: [],\r\n    model: AgentStub,\r\n    where: {\r\n      uuid\r\n    }\r\n  }],\r\n  raw: true\r\n}\r\n\r\ntest.beforeEach(async t => {\r\n  sandbox = sinon.sandbox.create()\r\n\r\n  MetricStub = {\r\n    belongsTo: sinon.spy()\r\n  }\r\n\r\n  // models create stub\r\n  MetricStub.create = sandbox.stub()\r\n  MetricStub.create.withArgs(newMetric).returns(Promise.resolve({\r\n    toJSON () { return newMetric }\r\n  }))\r\n\r\n  // modeles findAll stub\r\n  MetricStub.findAll = sandbox.stub()\r\n  MetricStub.findAll.withArgs(metricArgs).returns(Promise.resolve(metricFixtures.byAgentUuid(uuid)))\r\n  MetricStub.findAll.withArgs(typeUuidArgs).returns(Promise.resolve(metricFixtures.byTypeAgentUuid(type, uuid)))\r\n\r\n  // models findOne stub\r\n  AgentStub.findOne = sandbox.stub()\r\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixture.byUuid(uuid)))\r\n\r\n  const setupDatabase = proxyquire('../', {\r\n    './models/agent': () => AgentStub,\r\n    './models/metric': () => MetricStub\r\n  })\r\n  db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n  sandbox && sinon.sandbox.restore()\r\n})\r\n\r\ntest.serial('Setup metrics', t => {\r\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was called')\r\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Agent arguments should be MetricModel')\r\n  t.true(MetricStub.belongsTo.called, 'MetricStub.belongsTo was called')\r\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Metric argument should be AgentModel')\r\n})\r\n\r\ntest('Metric', t => {\r\n  t.truthy(db.Metric, 'should be exist')\r\n})\r\n\r\ntest.serial('Metric#create', async t => {\r\n  let metric = await db.Metric.create(uuid, newMetric)\r\n\r\n  t.true(AgentStub.findOne.called, 'Agent service .findOne was called')\r\n  t.true(AgentStub.findOne.calledOnce, '.findOne was called once')\r\n  t.true(MetricStub.create.called, 'Metric servis .create was called')\r\n  t.true(MetricStub.create.calledOnce, '.create was called once')\r\n  t.true(MetricStub.create.calledWith(newMetric), 'metric service .create was called with specific args')\r\n  t.deepEqual(metric, metricFixtures.single)\r\n})\r\n\r\ntest.serial('Metric#findByAgent', async t => {\r\n  let metric = await db.Metric.findByAgentUuid(uuid)\r\n\r\n  t.true(MetricStub.findAll.called, 'metric service .findAll was called')\r\n  t.true(MetricStub.findAll.calledOnce, 'metric service .findAll was called once')\r\n  t.true(MetricStub.findAll.calledWith(metricArgs), 'metric service .findAll was called with specific args')\r\n  t.deepEqual(metric, metricFixtures.byAgentUuid(uuid))\r\n})\r\n\r\ntest.serial('Metric#findByTypeAgentUuid', async t => {\r\n  let metric = await db.Metric.findByTypeAgentUuid(type, uuid)\r\n\r\n  t.true(MetricStub.findAll.called, '.findAll was called from metric service')\r\n  t.true(MetricStub.findAll.calledOnce, '.findAll was called once from metric service')\r\n  t.true(MetricStub.findAll.calledWith(typeUuidArgs), '.findAll was called from metric service with specific args')\r\n  t.deepEqual(metric, metricFixtures.byTypeAgentUuid(type, uuid))\r\n})"]}