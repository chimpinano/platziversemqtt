{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","id","AgentStub","db","sandbox","beforeEach","create","hasMany","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","findById","deepEqual","byId"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA,MAAMG,gBAAgBH,QAAQ,kBAAR,CAAtB;;AAEA,IAAII,SAAS;AACXC,aAAS,YAAY,CAAE;AADZ,CAAb;;AAIA,IAAIC,aAAa;AACbC,eAAWN,MAAMO,GAAN;AADE,CAAjB;;AAIA,IAAIC,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBR,cAAcM,MAAhC,CAAb;AACA,IAAIG,KAAK,CAAT;AACA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEAhB,KAAKiB,UAAL,CAAgB,YAAY;AACxBD,cAAUd,MAAMc,OAAN,CAAcE,MAAd,EAAV;;AAEAJ,gBAAY;AACVK,iBAASH,QAAQP,GAAR;AADC,KAAZ;;AAIA,UAAMW,gBAAgBjB,WAAW,KAAX,EAAkB;AACpC,0BAAkB,MAAMW,SADY;AAEpC,2BAAmB,MAAMP;AAFW,KAAlB,CAAtB;;AAKAQ,SAAK,MAAMK,cAAcf,MAAd,CAAX;AACH,CAbD;;AAeAL,KAAKqB,SAAL,CAAe,MAAM;AACjBL,eAAWd,MAAMc,OAAN,CAAcM,OAAd,EAAX;AACH,CAFD;;AAIAtB,KAAK,OAAL,EAAcuB,KAAK;AAAA;;AACjBA,MAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmB,4BAAnB;AACD,CAFD;;AAIAzB,KAAK0B,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;AAAA;AAAA;;AACtBA,MAAEI,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiC,iCAAjC;AACAL,MAAEI,IAAF,yBAAO,uEAAUR,OAAV,+BAAkBU,UAAlB,aAA6BtB,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiD,oCAAjD;AACAgB,MAAEI,IAAF,yBAAO,iEAAWnB,SAAX,wBAAqBoB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAoC,oCAApC;AACAL,MAAEI,IAAF,yBAAO,wEAAWnB,SAAX,+BAAqBqB,UAArB,aAAgCf,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmD,mCAAnD;AACH,CALD;;AAOAd,KAAK0B,MAAL,CAAY,gBAAZ,EAA8B,MAAMH,CAAN,IAAW;AACrC,QAAIO,QAAQ,MAAMf,GAAGU,KAAH,CAASM,QAAT,CAAkBlB,EAAlB,CAAlB;;AAEAU,MAAES,SAAF,CAAYF,KAAZ,EAAmB1B,cAAc6B,IAAd,CAAmBpB,EAAnB,CAAnB,EAA2C,oBAA3C;AACH,CAJD","file":"agent-tests.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\n\r\nconst agentFixtures = require('./fixtures/agent')\r\n\r\nlet config = {\r\n  logging: function () {}\r\n}\r\n\r\nlet MetricStub = {\r\n    belongsTo: sinon.spy()\r\n}\r\n\r\nlet single = Object.assign({}, agentFixtures.single)\r\nlet id = 1\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\ntest.beforeEach(async () => {\r\n    sandbox = sinon.sandbox.create()\r\n  \r\n    AgentStub = {\r\n      hasMany: sandbox.spy()\r\n    }\r\n\r\n    const setupDatabase = proxyquire('../', {\r\n        './models/agent': () => AgentStub,\r\n        './models/metric': () => MetricStub\r\n    })\r\n    \r\n    db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n    sandbox && sinon.sandbox.restore()\r\n})\r\n\r\ntest('Agent', t => {\r\n  t.truthy(db.Agent, 'Agent service should exist')\r\n})\r\n\r\ntest.serial('Setup', t => {\r\n    t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\r\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')\r\n    t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\r\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\r\n})\r\n\r\ntest.serial('Agent#findById', async t => {\r\n    let agent = await db.Agent.findById(id)\r\n  \r\n    t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\r\n})\r\n"]}