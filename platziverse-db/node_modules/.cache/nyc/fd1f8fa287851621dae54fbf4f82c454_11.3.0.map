{"version":3,"sources":["agent-tests.js"],"names":["test","require","sinon","proxyquire","config","logging","MetricStub","belongsTo","spy","AgentStub","db","sandbox","beforeEach","create","hasMany","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith"],"mappings":"AAAA;;;;;AAEA,MAAMA,OAAOC,QAAQ,KAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,aAAaF,QAAQ,YAAR,CAAnB;;AAEA,IAAIG,SAAS;AACXC,aAAS,YAAY,CAAE;AADZ,CAAb;;AAIA,IAAIC,aAAa;AACbC,eAAWL,MAAMM,GAAN;AADE,CAAjB;;AAIA,IAAIC,YAAY,IAAhB;AACA,IAAIC,KAAK,IAAT;AACA,IAAIC,UAAU,IAAd;;AAEAX,KAAKY,UAAL,CAAgB,YAAY;AACxBD,cAAUT,MAAMS,OAAN,CAAcE,MAAd,EAAV;;AAEAJ,gBAAY;AACVK,iBAASH,QAAQH,GAAR;AADC,KAAZ;;AAIA,UAAMO,gBAAgBZ,WAAW,KAAX,EAAkB;AACpC,0BAAkB,MAAMM,SADY;AAEpC,2BAAmB,MAAMH;AAFW,KAAlB,CAAtB;;AAKAI,SAAK,MAAMK,cAAcX,MAAd,CAAX;AACH,CAbD;;AAeAJ,KAAKgB,SAAL,CAAe,MAAM;AACjBL,eAAWT,MAAMS,OAAN,CAAcM,OAAd,EAAX;AACH,CAFD;;AAIAjB,KAAK,OAAL,EAAckB,KAAK;AAAA;;AACjBA,MAAEC,MAAF,uBAAS,qCAAGC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmB,4BAAnB;AACD,CAFD;;AAIApB,KAAKqB,MAAL,CAAY,OAAZ,EAAqBH,KAAK;AAAA;AAAA;AAAA;AAAA;;AACtBA,MAAEI,IAAF,yBAAO,gEAAUR,OAAV,wBAAkBS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiC,iCAAjC;AACAL,MAAEI,IAAF,yBAAO,uEAAUR,OAAV,+BAAkBU,UAAlB,aAA6BlB,UAA7B,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAiD,oCAAjD;AACAY,MAAEI,IAAF,yBAAO,iEAAWf,SAAX,wBAAqBgB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAoC,oCAApC;AACAL,MAAEI,IAAF,yBAAO,wEAAWf,SAAX,+BAAqBiB,UAArB,aAAgCf,SAAhC,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAmD,mCAAnD;AACH,CALD","file":"agent-tests.js","sourcesContent":["'use strict'\r\n\r\nconst test = require('ava')\r\nconst sinon = require('sinon')\r\nconst proxyquire = require('proxyquire')\r\n\r\nlet config = {\r\n  logging: function () {}\r\n}\r\n\r\nlet MetricStub = {\r\n    belongsTo: sinon.spy()\r\n}\r\n\r\nlet AgentStub = null\r\nlet db = null\r\nlet sandbox = null\r\n\r\ntest.beforeEach(async () => {\r\n    sandbox = sinon.sandbox.create()\r\n  \r\n    AgentStub = {\r\n      hasMany: sandbox.spy()\r\n    }\r\n\r\n    const setupDatabase = proxyquire('../', {\r\n        './models/agent': () => AgentStub,\r\n        './models/metric': () => MetricStub\r\n    })\r\n    \r\n    db = await setupDatabase(config)\r\n})\r\n\r\ntest.afterEach(() => {\r\n    sandbox && sinon.sandbox.restore()\r\n})\r\n\r\ntest('Agent', t => {\r\n  t.truthy(db.Agent, 'Agent service should exist')\r\n})\r\n\r\ntest.serial('Setup', t => {\r\n    t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\r\n    t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')\r\n    t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\r\n    t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the AgentModel')\r\n})\r\n"]}